# StockEndOfDayUdater
Updates spreadsheet csv ticker files with OHLC &amp; volume &amp; splits files

// Alpha Vantage Stock list End of Day Updater for Linux

// Author: Michael B. 2019 using Linux Mint Mate and C++11


// This C++ linux program is an extension to the file obtained from:  https://github.com/AvapiDotNet/AvapiCpp or more specific from https://github.com/AvapiDotNet/AvapiCpp/tree/master/Linux/Ubuntu/64bit/AVAPI/AvapiExamples
// Its goal is to consistently update a list of stock csv files

// ----------------------------------------------------------------------------------------------------------------------------------
// IMPORTANT !!!
YOU MUST READ, INSTALL AND CONFIGURE THE Avapi library AS EXPLAINED IN THE FOLLOWING README GITHUB WEBSITE LINK: "https://github.com/AvapiDotNet/AvapiCpp" BEFORE PROCEEDING TO THIS README FILE . WITHOUT THE AVAPI LIBRARY THE PROGRAM WON'T RUN
// ----------------------------------------------------------------------------------------------------------------------------------


// ----------------------------------------------------------------------------------------------------------------------------------
// In order for this program to work you need to:
// Register to Alpha Vantage web site and get your personal api key (https://www.alphavantage.co/support/#api-key). It's for free!
// and enter it in the start of the "stock_list.txt" file: My personal api key: Enter your api key here
// YOU ALSO NEED TO ENTER ALL THE STOCK TICKER NAMES YOU WANT TO CREATE/UPDATE IN THE FILE "stock_list.txt" which should be in the same directory as this file
   // A file of all the tickers seperated by lines, and the ticker is the first string before a comma like msft,microsoft \n in one line 
// ----------------------------------------------------------------------------------------------------------------------------------

The program loads the tickers list into memory and request each one seperetly (in compact or full mode depending on the already existing data on your computer) and if the new file isn't saved to the hard disk within a limited time (currently: time_limit_for_file_update = 15 seconds) it remembers it and move to the next ticker in the list.
After the first iteration loop has ended, the program starts with the tickers it remembred that were not updated in the first iteration and keeps repeating it as long as this list getting shorter, meaning that at least one of the tickers that wasn't updated by the previous iteration got updated and saved to file in the current iteration




The time it takes to update the files is dependent also on the following Alpha Vantage free API requests limits that the program respects:
// Q&A from: https://www.alphavantage.co/support/#support
// Are there usage/frequency limits for the API service? 
// We are proud to provide free API service for our global community of users and recommend that you make API requests sparingly (up to 5 API requests per minute and 500 requests per day) to achieve the best server-side performance. If you would like to target a larger API call volume, please visit premium membership.
    bool free_API_service = true;// USES THESE LIMITS: (up to 5 API requests per minute and 500 requests per day)
    int max_API_requests_per_minute = 5;// if that limit is reached the program sleeps for the rest of that minute and resume after that
    int max_API_requests_per_day = 500;// if the program reach this limit it output a list of all the tickers that were not updated and sleeps for 24 hours !!! and resume after that
    
    
    
    
The program also updates the newest record in the old file because the file might have been updated previously during trading hours on that record date and the high,low,close & volume fields were not final for that day.



If the csv file of the ticker already exist in the directory this program only updates it
by downloading in compact mode (newest 100 daily records) if the newest ~90 records are missing 
and in full mode if more than that or if the csv file doesn't exist



The data of the stocks are in a csv file exactly like it was in the old Yahoo site.
The splits are extracted from the incoming data and placed in a directory called 'splits' with the same ticker
if the stock file name is 'AMZN.csv' then its split file inside the 'splits' directory is 'AMZN_spl.csv'

For example the split format generated by the program for AMZN_spl.csv is:
1998-06-02,2.0000	
1999-01-05,3.0000	
1999-09-02,2.0000	


The format of 'Stock_list.txt' & 'Stock_list_short.txt' files is simple:
My personal api key: Enter your api key here
// These 2 Slashes on the begining of a line means a comment line and the program ignores that line
Indices/^GSPC,S&P 500,,,,,,,,,, - the program gets only the ticker from 'Indices/^GSPC' part till the first comma ',' or the newline and disregard everything till the next line

This is the directory structure I use but you can enter whatever you like as long as there is a 'splits' directory inside each directry name:
(You need to change the mb directory to fit your directory structure)

/home/mb/AvapiExample/stocks
/home/mb/AvapiExample/stocks/splits

/home/mb/AvapiExample/stocks/S&P_500
/home/mb/AvapiExample/stocks/S&P_500/splits

/home/mb/AvapiExample/stocks/Nasdaq_100
/home/mb/AvapiExample/stocks/Nasdaq_100/splits

/home/mb/AvapiExample/stocks/Indices
/home/mb/AvapiExample/stocks/Indices/splits

/home/mb/AvapiExample/stocks/ETF
/home/mb/AvapiExample/stocks/ETF/splits






// I wrote 3 linux shell files that I can double click & Run
// 1. 'update only S&P500 and Dow.sh' which updates the stocks tickers in the 'Stock_list_just_SP500_and_DOW.txt' file
// 2. 'update Stock_list_short.sh' which updates the stocks tickers in the 'Stock_list_short.txt' file
// 3. 'update Stock_list.sh' which updates the stocks tickers in the 'Stock_list.txt' file

becaue of the limitation of the free_API_service (up to 5 API requests per minute and 500 requests per day)
if the stock_list is big it takes a lot of time to update.
Please be patient and don't abuse Alpha Ventage kindness in any way
If you need it to update more quickly you can just pay them and download without limitations

Use the 'update Stock_list.sh' only once a month or more on the weekend because it takes 2 days(more than 500 tickers so it sleeps for 24 hours)
and use the shorter list to update my portfolio & watchlist stocks on the weekend or the shortest list daily (don't abuse the server or it will disappear for all of us)


I created the linux *.sh shell files which have these lines so you can just double click it (after you changed the directory names to fit your directory structure)

open the shell fileS and change the 'mb' directory name in these following lines to your username directory 

1.
=============================
cd /home/mb/AvapiExample/
=============================
2. use this line only if you need to compile the c++ file if you changed something
=================================================================================================================================================
g++ -L /home/mb/AvapiExample/Avapi/ -I /home/mb/AvapiExample/ -std=c++11 TIME_SERIES_DAILY_ADJUSTED_UPDATER.cpp -o DAILY_ADJUSTED_UPDATER -lavapi -lpthread
=================================================================================================================================================
3.
export LD_LIBRARY_PATH=<LIB_PATH>:$LD_LIBRARY_PATH
you need to replace <LIB_PATH> with the Avapi path, in our example is: /home/mb/AvapiExample/Avapi/.
=======================================================================================
export LD_LIBRARY_PATH=/home/mb/AvapiExample/Avapi/:$LD_LIBRARY_PATH
=======================================================================================
4.
Here choose one of these 2 (the first uses the 'Stock_list_short.txt' to update only the stocks I WATCH CLOSELY and the long 'Stock_list.txt' tickers names and I update it on the weekends it takes 2 days because of 500 limits per day)
=============================
./DAILY_ADJUSTED_UPDATER Stock_list_short.txt > output.txt
or
./DAILY_ADJUSTED_UPDATER Stock_list.txt > output.txt
=============================

You can watch the 'output.txt' file while the program is running to check what tickers have already been updated








  
